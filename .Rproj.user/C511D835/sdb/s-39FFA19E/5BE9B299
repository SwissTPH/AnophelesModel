{
    "collab_server" : "",
    "contents" : "# This file contains all the functions necessary for querying the\n# package database.\n\n#########list_all_species############\n#' @title Print all the species whose entomological parameters are provided in\n#' the package database.\n#'\n#' @description This function can be used to list\n#' all mosquito species whose entomological parameters are available in the\n#' package.\n#'\n#' @return The function prints all the species names and also\n#' returns a vector containing them.\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#'\n#' @examples\n#' species_vec = list_all_species()\n#' print(species_vec)\n#'\n#' @export\n#'\nlist_all_species = function() {\n    species_vec = unique(vec_ent_param$species_name)\n    paste(species_vec, collapse = \", \")\n    return(species_vec)\n}\n\n#########list_activity############\n#' @title Extract activity patterns of humans or mosquitoes\n#'\n#' @description This function returns the activity patterns\n#' of humans or mosquitoes available in the package database based on a list of\n#' provided criteria.\n#'\n#' @param species string corresponding to the name of the species to extract the\n#' activity patterns for. For human activity patterns, this parameters should be\n#' \"Homo Sapiens\". For mosquito activity patterns, this name must match one of\n#' the Anopheles species provided in the package.\n#' The default value is \"Anopheles gambiae\".\n#' To see all available Anopheles species, use the function list_all_species().\n#'\n#' @param sampling can only be one of the following strings:\n#' \\itemize{\n#' \\item \\code{IND}: proportion of humans indoors; only relevant for humans\n#' (species parameter is \"Homo Sapiens\").\n#' \\item \\code{BED}: proportion of humans in bed; only relevant for humans\n#' (species parameter is \"Homo Sapiens\").\n#' \\item \\code{HBI}: proportion of mosquito biting of humans occurring indoors;\n#' only relevant for mosquito species.\n#' \\item \\code{HBO}: proportion of mosquito biting of humans occurring outdoors;\n#' only relevant for mosquito species.\n#' #' \\item \\code{ABO}: proportion of mosquito biting of animals occurring\n#' outdoors; only relevant for mosquito species.\n#' #' \\item \\code{HB}: proportion of mosquito biting of humans\n#' (indoors and outdoors); only relevant for mosquito species.\n#' }\n#'\n#' @param country name of the country. Default value is NULL. If the country is\n#' not provided for the provided species and\n#' sampling code, then data for all available countries will be displayed.\n#'\n#' @param site name of the geographical location within the country.\n#' Default value is NULL. If this parameter is\n#' not provided for the provided species and\n#' sampling code, then data for all available sites and countries will\n#' be displayed).\n#'\n#' @return data frame with the following columns:\n#' \\itemize{\n#' \\item \\code{ID}: id of the database entry\n#' \\item \\code{species}: name of the considered species\n#' \\item \\code{sampling}: sampling type\n#' \\item \\code{country}: country where measurements were taken\n#' \\item \\code{site}: geographical site where measurements were taken\n#' \\item \\code{variable}: time points; these are chronologically ordered in the\n#' output data frame\n#' \\item \\code{value}: value of the sampling at each time point\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#' @examples\n#' # List the proportion of human biting indoors in the Rachuonyo region, Kenya.\n#' humans_indoors = list_rhythms(species = \"Homo sapiens\", sampling = \"IND\",\n#' site=\"Rachuonyo\")\n#' print(humans_indoors)\n#'\n#' @export\n#'\nlist_activity = function(species = \"Anopheles gambiae\", sampling = \"HBI\",\n                        country = NULL, site = NULL) {\n    rhythms_table = NULL\n    if(is.null(species) | is.null(sampling)) {\n        stop(\"ERROR: Species name and sampling type should be provided.\")\n    }\n\n    # If no country and site information is provided, all entries are considered\n    if(is.null(country)) {\n        country = activity_patterns$country\n    }\n    if(is.null(site)) {\n        site = activity_patterns$site\n    }\n\n    # Selecting the activity patterns based on provided criteria\n    selected_patterns = activity_patterns[\n        which(activity_patterns$species == species &\n                activity_patterns$sampling == sampling &\n                activity_patterns$country %in% country &\n                activity_patterns$site %in% site), ]\n\n    if (nrow(selected_patterns) == 0 || is.null(nrow(selected_patterns))) {\n        print(paste0(\"ERROR: No activity patterns found in the package\",\n                            \"database for the provided search criteria.\"))\n    }\n\n    return(selected_patterns)\n}\n\n#' @title Print all the interventions available in the package\n#'\n#' @description This function can be\n#' used to list all interventions whose impact\n#' models parameterisations are available in the package.\n#'\n#' @return The function prints all the interventions and also\n#' returns a vector containing them.\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#'\n#' @examples\n#' interv_vec = list_available_interventions()\n#' print(interv_vec)\n#'\n#' @export\n#'\nlist_available_interventions = function() {\n    all_interv_names = interventions_param$interventions_summary$Intervention\n    interv_vec = unique(all_interv_names)\n    paste(interv_vec, collapse = \", \")\n    return(interv_vec)\n}\n\n#' @title Print all the interventions parameterisations available in the package\n#'\n#' @description This function can be used to list\n#' all interventions models parameterisations available in the package.\n#'\n#' @return The function prints all the interventions models and also\n#' returns a vector containing them.\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#' @examples\n#' interv_models = list_intervention_models()\n#' print(interv_models)\n#'\n#' @export\n#'\nlist_intervention_models = function() {\n    int_models = interventions_param$interventions_summary[,\n                                        c(\"Parameterisation\", \"Intervention\")]\n    return(int_models)\n}\n\n#' @title Get net types\n#'\n#' @description This function displays a table of the\n#' available LLIN types and the countries for which durability profiles\n#' are available within the \\code{AnophelesModel} database\n#' @return The function returns a table of net types and corresponding countries\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#'\n#' @examples\n#' net_types = get_net_types()\n#' print(net_types)\n#'\n#' @export\n#'\nget_net_types = function() {\n    durability_data = interventions_param$LLINs_params$durability_estim\n    net_types = unique(durability_data[, c(\"Net_Type\", \"Country\"), drop = TRUE])\n    rownames(net_types) = NULL\n    return(net_types)\n}\n\n#' @title Get LLIN survival and holed area\n#'\n#' @description This function can be\n#' used to calculate LLIN survival and holed area using parameters from\n#' the \\code{AnophelesModel} database for a given net type and country.\n#' To list all available net types and corresponding countries,\n#' use the function get_net_types().\n#'\n#' @param net_type type of the LLIN\n#' @param country selected country of interest for which the net_type exists\n#' @param insecticide_type type of insecticide\n#' @param n_ips number of time points to consider throughout the duration\n#' @param duration considered time of the intervention, default is 3 years\n#'\n#' @return The function returns an object with the following attributes:\n#' \\itemize{\n#' \\item \\code{time}: time point\n#' \\item \\code{insecticideContent}: insecticide content of the net\n#' \\item \\code{logHoles}: log holed area of the net\n#' \\item \\code{survival}: survival of the net\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#' @author Olivier BriÃ«t, \\email{olivier.briet@swisstph.ch}\n#' @author Nakul Chitnis, \\email{nakul.chitnis@swisstph.ch}\n#' @author Tom Smith, \\email{thomas.smith@swisstph.ch}\n#'\n#' @examples\n#' net_surv = get_net_decay(net_type = \"DuraNet\",\n#' country = \"Kenya\", n_ips = 100, duration = 3)\n#' print(net_surv)\n#'\n#' @export\n#'\nget_net_decay = function(net_type, country, insecticide_type, n_ips, duration){\n    if(net_type == \"Default\"){\n        # Calculate default attrition and holed area\n        # Data from Briet et al (2019)\n        # attrition and insecticide decay are from Briet & Penny (2013)\n        # holed area is from  Morgan J et al Am J Trop Med Hyg. 2015.\n        s_decay_p = list(initialEffect = 1, L = 20.7725,\n                         k = 18, duration = duration)\n        survival = interp_decay(\"smoothcompact_function\", s_decay_p, n_ips)\n        #<holeRate mean=\"1.80\" sigma=\"0.80\"/>\n        #<ripRate mean=\"1.80\" sigma=\"0.80\"/><ripFactor value=\"0.3\"/>\n        #This approximates the central scenario hole index\n        h_decay_p = list(initialEffect = 1, a = 0,\n                         b = 58.5949, duration = duration)\n        holed.surface.area = interp_decay(\"parabolic_growth_function\",\n                                          h_decay_p, n_ips)\n    } else {\n        # Country-specific attrition and holed area by LLIN type from PMI study\n        # Attrition\n        survival_data = with(interventions_param$LLINs_params$durability_estim,\n                             Value[which(Country == country &\n                                        Net_Type == net_type &\n                                        Parameter == 'Survival')])\n        semester = with(interventions_param$LLINs_params$durability_estim,\n                            Semester[which(Country == country &\n                                            Net_Type == net_type &\n                                            Parameter == 'Survival')])\n        # assign midpoint of each semester as net age in years\n        net_age = (semester-0.5)*0.5\n        tr_survival = log((100 - (survival_data-0.1))/100)\n        ip_tr_survival = spline_interpolation(tr_survival, semester,\n                                              n_ips, duration)\n        survival = ifelse(ip_tr_survival > 0, 1, 1-exp(ip_tr_survival))\n        # Holed area\n        semester = with(interventions_param$LLINs_params$durability_estim,\n                        Semester[which(Country == country &\n                            Net_Type == net_type &\n                            Parameter == 'Mean of log transformed holed area')])\n        holed_area_data = with(\n                            interventions_param$LLINs_params$durability_estim,\n                        Value[which(Country == country &\n                            Net_Type == net_type &\n                            Parameter == 'Mean of log transformed holed area')])\n        holed.surface.area = exp(spline_interpolation(holed_area_data, semester,\n                                                      n_ips, duration))\n    }\n\n    # Cap the holed surface area at the total surface area of the net\n    total_LLIN_surface = 192000\n    holed.surface.area.cap = ifelse(holed.surface.area > total_LLIN_surface,\n                                    total_LLIN_surface, holed.surface.area)\n    logHoles = log(holed.surface.area.cap + 1)\n\n    # Select the relevant insecticide decay parameters\n    LLINs_insecticide = interventions_param$LLINs_params$insecticide_c\n    insecticide_p = as.list(LLINs_insecticide[, insecticide_type])\n\n    # Obtain the vector of interpolation points for insecticide decay\n    insecticide.content = interp_decay(\"exponential_function\",\n                        list(initialEffect = insecticide_p$initialInsecticide,\n                             L = 1.5, duration = duration), n_ips)\n    ips = seq(1:n_ips)\n    t = duration*(ips - 1)/n_ips\n    net_decay = data.frame(time = t, logHoles = logHoles,\n                           insecticideContent = insecticide.content,\n                           survival = survival)\n    return(as.data.frame(net_decay))\n}\n\n#' @title Calculate human exposure to biting\n#'\n#' @description \\code{get_in_out_exp} This function can be\n#' used to calculate indoor and outdoor exposure to biting.\n#'\n#' @param activity_cycles data frame with the following columns:\n#' \\itemize{\n#' \\item \\code{HBI}: proportion of human biting indoors\n#' \\item \\code{HBO}: propotion human biting outdoors\n#' \\item \\code{humans_indoors}: proportion of humans indoors\n#' \\item \\code{humans_in_bed}:proportion of humans in bed\n#' }\n#' @param vec_p list of vector-specific entomological paramteres (see\n#' description of output from function \\code{def_vector_params})\n#'\n#' @return The function returns an object with the following attributes:\n#' \\itemize{\n#' \\item \\code{Exposure_Indoor_total}: indoor exposure proportion\n#' \\item \\code{Exposure_Outdoor_total}: outdoor exposure proportion\n#' \\item \\code{Exposure_Indoor_whileinbed}: indoor in bed exposure proportion\n#' \\item \\code{Exposure_Outdoor_whileinbed}: outdoor in bed exposure proportion\n#' \\item \\code{indoor_resting}: proportion of mosquitoes that rest indoors.\n#' }\n#' All numbers in the output list are proportions of the overall total\n#' exposure in the absence of interventions.\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#' @author Olivier BriÃ«t, \\email{olivier.briet@swisstph.ch}\n#' @author Nakul Chitnis, \\email{nakul.chitnis@swisstph.ch}\n#' @author Tom Smith, \\email{thomas.smith@swisstph.ch}\n#'\n#' @references TO DO\n#'\n#' @examples\n#' net_surv = get_net_survival_and_holed_area()\n#' print(net_surv)\n#'\n#' @export\n#'\nget_in_out_exp = function(activity_cycles, vec_p) {\n    # Calculate exposure to biting by category in the absence of interventions\n    # Endophagy is ideally the proportion of bites that are indoors from matched\n    # indoor:outdoor landing collections\n    activity_cycles$HBI = activity_cycles$HBI/\n                        sum(activity_cycles$HBI, na.rm = TRUE) * vec_p$endophagy\n    activity_cycles$HBO = activity_cycles$HBO/\n                sum(activity_cycles$HBO, na.rm = TRUE) * (1 - vec_p$endophagy)\n\n    # Assume humans are indoors while sleeping unless a separate humans_indoors\n    # cycle is specified\n    activity_cycles$humans_indoors = with(activity_cycles,\n                                          ifelse(is.na(humans_indoors),\n                                                 humans_in_bed, humans_indoors))\n    activity_cycles$Exposure_Indoor_total = with(activity_cycles,\n                                                 HBI*humans_indoors)\n    activity_cycles$Exposure_Outdoor_total = with(activity_cycles,\n                                                  HBO*(1-humans_indoors))\n\n    # If humans_indoors < humans_in_bed we assign the\n    # difference to outdoor sleeping\n    activity_cycles$Exposure_Indoor_whileinbed = with(activity_cycles,\n                                                HBI*pmin(humans_in_bed,\n                                                humans_indoors, na.rm = TRUE))\n    activity_cycles$Exposure_Outdoor_whileinbed = with(activity_cycles,\n                                HBO*pmax(humans_in_bed-humans_indoors,\n                                rep(0, length(humans_indoors)), na.rm = TRUE))\n    Overall_total = sum(activity_cycles$Exposure_Indoor_total, na.rm = TRUE) +\n        sum(activity_cycles$Exposure_Outdoor_total, na.rm = TRUE)\n\n    # Calculate exposures\n    # Total indoor exposure as a proportion of overall exposure\n    Exposure_Indoor_total =\n        sum(activity_cycles$Exposure_Indoor_total, na.rm = TRUE)/Overall_total\n    # Total outdoor exposure as a proportion of overall exposure\n    Exposure_Outdoor_total =\n        sum(activity_cycles$Exposure_Outdoor_total, na.rm = TRUE)/Overall_total\n    # Total indoor in bed exposure as a proportion of overall exposure\n    Exposure_Indoor_whileinbed =\n        sum(activity_cycles$Exposure_Indoor_whileinbed,\n                                                    na.rm = TRUE)/Overall_total\n    # Total outdoor in bed exposure as a proportion of overall exposure\n    Exposure_Outdoor_whileinbed =\n        sum(activity_cycles$Exposure_Outdoor_whileinbed,\n                                                    na.rm = TRUE)/Overall_total\n\n    # Indoor-outdoor patterns relate to both mosquito and human behaviour.\n    indoor_outdoor = list(Exposure_Indoor_total, Exposure_Outdoor_total,\n                          Exposure_Indoor_whileinbed,\n                          Exposure_Outdoor_whileinbed, vec_p$endophily)\n    names(indoor_outdoor) = c('Exposure_Indoor_total', 'Exposure_Outdoor_total',\n                              'Exposure_Indoor_whileinbed',\n                              'Exposure_Outdoor_whileinbed', 'indoor_resting')\n    return(indoor_outdoor)\n}\n\n#########get_exposure_multiplier#########\n#' @title calculate adjustment for averted exposure\n#'\n#' @description \\code{calculate_impact_ip} This function calculates\n#' the proportion of averted exposure to adjust for\n#' depending on the human location importance for intervention impact\n#' @param param_name parameter name to adjust exposure for. Can only be one of:\n#' \"\\code{alphai}\", \"\\code{PBi}\", \"\\code{PCi}\", \"\\code{PDi}\"\n#' @param model_obj list of vector- and host-specific entomological parameters\n#' (see description of output from function \\code{calc_model_params})\n#' @param intervention_type name of the type of intervention, can be only one\n#' of: \"LLINs\", \"IRS\", \"LLINsO\", \"Screening\", \"Larviciding\".\n#'\n#' @return exposure multiplier value to be used for adjusting averted exposure\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#' @author Olivier BriÃ«t, \\email{olivier.briet@swisstph.ch}\n#' @author Nakul Chitnis, \\email{nakul.chitnis@swisstph.ch}\n#' @author Tom Smith, \\email{thomas.smith@swisstph.ch}\n#'\n#' @references TO DO\n#'\n#' @examples\n#'\n#' @export\n#'\n\nget_exposure_multiplier = function(param_name, model_obj, intervention_type) {\n    # Check the inputs\n    if (!(param_name %in% c(\"alphai\", \"PBi\", \"PCi\", \"PDi\"))) {\n        stop(\"The argument param_name should be one of: alphai, PBi, PCi, PDi.\")\n    }\n    interventions = c(\"LLINs\", \"IRS\", \"LLINsO\", \"Screening\", \"Larviciding\")\n    if (!(intervention_type %in% interventions)) {\n        stop(paste0(\"The argument intervention_type should be one of: \",\n                    interventions))\n    }\n\n    # Calculate indoor and outdoor exposure to biting\n    biting_exp = get_in_out_exp(model_obj$activity, model_obj$vec_params)\n\n    # Calculate the exposure multiplier value\n    multiplier = adjustment_for_location(param_name, biting_exp,\n                                         intervention_type)\n    return(multiplier)\n}\n\n",
    "created" : 1634628627236.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "952397574",
    "id" : "5BE9B299",
    "lastKnownWriteTime" : 1634646466,
    "last_content_update" : 1634646466,
    "path" : "~/Documents/GitRepos/anophelesmodel2/dev_AnophelesModel/AnophelesModel/R/AnophelesModel_db_query.R",
    "project_path" : "R/AnophelesModel_db_query.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}