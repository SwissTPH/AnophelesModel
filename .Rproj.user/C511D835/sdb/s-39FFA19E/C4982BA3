{
    "collab_server" : "",
    "contents" : "# This file contains all the package functions necessary for initializing the\n# model parameters (vector, host and activity rhythms parameters) as well as\n# defining the intervention effects\n\n#########def_vector_params############\n#' @title define the vector-specific entomological parameters\n#'\n#' @description \\code{def_vector_params} This function can be used to load\n#' entomological parameters for mosquito species available in the package\n#' database or to set the entomological parameters to new custom values\n#' provided by the user.\n#'\n#' @param mosquito_species string corresponding to the name of the\n#' mosquito species. Default value is \"Anopheles gambiae\".\n#' To be able to use the parameters from the package database, this name must\n#' match one of the Anopheles species provided in the package.\n#' To see all available Anopheles species, use the function\n#' \\code{list_all_species()}.\n#'\n#' @param vector_table data frame with custom vector entomological values.\n#' Must be provided if custom parameter values should be used instead of\n#' the ones in the package database.\n#' The data frame should have the same structure (column names) as the database\n#' object \\code{vec_ent_param}. Default value is NULL.\n#'\n#' @param verbose boolean specifying whether any messages should be displayed\n#' during the execution of the function. Default value is TRUE.\n#'\n#' @return list object with the following attributes\n#' (same as \\code{vec_ent_param}):\n#' \\itemize{\n#' \\item \\code{species_name}: name of the mosquito species\n#' \\item \\code{M}: parous rate (proportion of host seeking mosquitoes that have\n#' laid eggs at least once)\n#' #' \\item \\code{M.sd}: standard deviation of the parous rate\n#' \\item \\code{Chi}: human blood index (proportion of mosquito blood meals\n#' derived from humans)\n#' \\item \\code{A0}: sac rate (proportion of mosquitoes who laid eggs in a day)\n#' \\item \\code{A0.sd}: standard deviation of the sac rate\n#' \\item \\code{zeta.3}: relative availability of different non-human hosts\n#' \\item \\code{td}: proportion of a day that a mosquito actively seeks a host\n#' \\item \\code{tau}: time required for a mosquito that has encountered a host to\n#' return to host seeking\n#' \\item \\code{ts}: duration of the extrinsic incubation period (time required\n#' for sporozoites to develop in mosquitoes)\n#' \\item \\code{endophily:} proportion of indoor resting mosquitoes\n#' \\item \\code{endophily.sd:} standard deviation of the endophily\n#' \\item \\code{endophagy:} proportion of indoor feeding mosquitoes\n#' \\item \\code{endophagy.sd:} standard deviation of the endophagy\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#' @import checkmate\n#'\n#' @examples\n#' # Retrieve the vector entomological parameters for An. gambiae\n#' gambiae_vec_p = def_vector_params()\n#'\n#' # Print all the parameters\n#' print(gambiae_vec_p)\n#'\n#' @export\n#'\ndef_vector_params = function(mosquito_species = \"Anopheles gambiae\",\n                             vector_table = NULL, verbose = TRUE) {\n    if(!is.null(vector_table)) {\n        # Check if input is correct\n        assertCol = checkmate::makeAssertCollection()\n        # Input needs to be a data frame\n        checkmate::assertDataFrame(vector_table, any.missing = FALSE,\n                                   col.names = \"named\", add = assertCol)\n        # with the same column names as vec_ent_params\n        checkmate::assertSubset(colnames(vector_table), colnames(vec_ent_param),\n                                empty.ok = FALSE, fmatch = FALSE)\n        # and numeric, positive entries except for the name of the species\n        checkmate::assertDataFrame(subset(vector_table,\n                                          select = -c(species_name)),\n                                   types = \"numeric\", add = assertCol)\n        checkmate::assertNumeric(unlist(subset(vector_table, select =\n                                                   -c(species_name))),\n                                 lower = 0,\n                                 add = assertCol)\n        checkmate::reportAssertions(collection = assertCol)\n\n        vec_p = as.list(vector_table)\n        if(verbose) {\n            print(paste(\"Object with vector entomological parameters defined\",\n                        \"using values provided by the user.\"))\n        }\n    } else {\n        # First check if the given mosquito species is in the package database\n        if(!(mosquito_species %in% vec_ent_param$species_name)) {\n            err_msg = paste0(\"The provided mosquito species is not in \",\n                             \"the package database. To retrieve the list of\",\n                             \"available species use list_all_species().\")\n            stop(err_msg)\n        } else {\n            vec_p = as.list(vec_ent_param[vec_ent_param$species_name ==\n                                              mosquito_species,])\n        }\n    }\n    return(vec_p)\n}\n\n\n#########def_host_params#####\n#' @title define host-specific entomological parameters\n#'\n#' @description \\code{def_host_params} This function can be used to load\n#' host-specific entomological parameters available in the package or to set\n#' the entomological parameters to new custom values provided by the user.\n#' @param mosquito_species string corresponding to the name of the\n#' mosquito species. Default value is \"Anopheles gambiae\".\n#' To be able to use the parameters from the package database, this name must\n#' match one of the Anopheles species provided in the package.\n#' To see all available Anopheles species, use the function\n#' \\code{list_all_species()}.\n#' @param host_table data frame with custom host-specific values.\n#' Must be provided if custom parameter values should be used instead of\n#' the ones in the package database.\n#' The provided data frame should have the same structure (column names)\n#' as the database object \\code{host_ent_param}. Default value is NULL.\n#' @param verbose boolean specifying whether any messages should be displayed\n#' during the execution of the function. Default value is TRUE.\n#'\n#' @return list object with the following vector attributes:\n#' \\itemize{\n#' \\item \\code{species_name}: name of the mosquito species\n#' \\item \\code{host}: vector of hosts (should be = {\"human\", \"animal\"})\n#' \\item \\code{PBi}: probability that a mosquito bites host i\n#' \\item \\code{PCi}: probability that a mosquito finds a resting place after\n#' biting a host of type i\n#' \\item \\code{PDi}: probability that a mosquito survives the resting phase\n#' after biting a host of type i\n#' \\item \\code{Kvi}: proportion of susceptible mosquitoes that become infected\n#' after biting any host of type i\n#' }\n#' Each vector has three elements corresponding to the probability values for:\n#' (1) humans protected by interventions, (2) humans not protected by\n#' interventions, and (3) animals.\n#' In absence of interventions, the first two values of each\n#' vector are identical.\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#' @author Olivier BriÃ«t\n#' @author Tom Smith\n#' @author Nakul Chitnis\n#'\n#' @import checkmate\n#'\n#' @examples\n#' # Retrieve the host-specific entomological parameters for An. gambiae\n#' gambiae_hosts_p = def_host_params()\n#'\n#' # Print all the parameters\n#' print(gambiae_hosts_p)\n#' @export\n#'\ndef_host_params = function(mosquito_species = \"Anopheles gambiae\",\n                           host_table = NULL, verbose = TRUE) {\n    # Parameters specified by the user\n    if(!is.null(host_table)) {\n        # Check if input is correct\n        assertCol = checkmate::makeAssertCollection()\n        # Input needs to be a data frame with two rows\n        checkmate::assertDataFrame(host_table, any.missing = FALSE,\n                                   col.names = \"named\", nrows = 2,\n                                   add = assertCol)\n        # with the same column names as vec_ent_params\n        checkmate::assertSubset(colnames(host_table), colnames(host_ent_param),\n                                empty.ok = FALSE, fmatch = FALSE)\n        # and numeric, positive entries less than 1 except for the name of\n        # the species and the type of host\n        checkmate::assertDataFrame(subset(host_table,\n                                          select = -c(species_name, host)),\n                                   types = \"numeric\", add = assertCol)\n        checkmate::assertNumeric(unlist(subset(host_table, select =\n                                                   -c(species_name, host))),\n                                 lower = 0, upper = 1,\n                                 add = assertCol)\n        # with values provided for both human and animal hosts\n        checkmate::checkSetEqual(host_table$species, c(\"human\", \"animal\"))\n        checkmate::reportAssertions(collection = assertCol)\n\n        if (verbose) {\n            print(paste(\"Using host-specific entomological parameters\",\n                        \"provided by the user.\"))\n        }\n        host_param = as.list(host_table)\n    }\n    else {\n        # First check if the given mosquito species is in the package database\n        if(!(mosquito_species %in% host_ent_param$species_name)) {\n            err_msg = paste0(\"No host parameters in the database for\n                             mosquito_species = \", mosquito_species)\n            stop(err_msg)\n        }\n        # Select the host parameters for the specified mosquito species\n        host_p = host_ent_param[host_ent_param$species_name ==\n                                    mosquito_species,]\n        host_param = as.list(host_p)\n    }\n\n    return(host_param)\n}\n\n#########def_activity_patterns#####\n#' @title defines the activity patterns of vectors and hosts\n#'\n#' @description \\code{def_activity_patterns} This function creates an object\n#' that contains information about mosquito and human activity:\n#' the biting rhythms of the mosquitoes and the times when humans\n#' are indoors or in bed.\n#' @param activity can be either a string corresponding to default entries:\n#' \"default_Anopheles_gambiae\", \"default_Anopheles_albimanus\"\n#' or a list object with the following attributes:\n#' \\itemize{\n#' \\item \\code{HBI}: ID or proportion of human biting indoors\n#' \\item \\code{HBO}: ID or propotion human biting outdoors\n#' \\item \\code{humans_indoors}: ID or proportion of humans indoors\n#' \\item \\code{humans_in_bed}: ID or proportion of humans in bed\n#' }\n#' These attribues can be either vectors with the corresponding values at\n#' each time point, or an ID corresponding to an entry in the package\n#' database object \\code{activity_patterns}.\n#' The function list_activity() can be used to retrieve the\n#' available entries for all or specific geographical locations.\n#'\n#' @return list object with the time series attributes:\n#' \\itemize{\n#' \\item \\code{HBI}: proportion of human biting indoors\n#' \\item \\code{HBO}: propotion human biting outdoors\n#' \\item \\code{humans_indoors}: proportion of humans indoors\n#' \\item \\code{humans_in_bed}:proportion of humans in bed\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@unibas.ch}\n#' @author Olivier BriÃ«t\n#' @author Nakul Chitnis, \\email{nakul.chitnis@unibas.ch}\n#' @author Tom Smith, \\email{thomas.smith@unibas.ch}\n#'\n#' @import checkmate\n#'\n#' @examples\n#' # Retrieve default human and mosquito activity patterns\n#' default_rhythms = def_activity_patterns(\"default_Anopheles_gambiae\")\n#' print(default_rhythms)\n#'\n#' @export\n#'\ndef_activity_patterns = function(activity = \"default_Anopheles_gambiae\") {\n    activity_patterns = NULL\n    if(is.character(activity)) {\n        # Use default activity patterns\n        if (\"default_Anopheles_gambiae\" %in% activity) {\n            activity_patterns$HBI = define_activity(62)\n            activity_patterns$HBO = define_activity(193)\n            activity_patterns$humans_indoors = define_activity(4)\n            activity_patterns$humans_in_bed = define_activity(24)\n        } else if (\"default_Anopheles_albimanus\" %in% activity) {\n            activity_patterns$HBI = define_activity(319)\n            activity_patterns$HBO = define_activity(340)\n            activity_patterns$humans_indoors = define_activity(4)\n            activity_patterns$humans_in_bed = define_activity(24)\n        } else {\n            stop(paste(\"Unknown set of activity patterns named\", activity))\n        }\n    } else {\n        # Use custom patterns or select by ID\n        activity_patterns$HBI = define_activity(activity$HBI)\n        activity_patterns$HBO = define_activity(activity$HBO)\n        activity_patterns$humans_indoors =\n            define_activity(activity$humans_indoors)\n        activity_patterns$humans_in_bed =\n            define_activity(activity$humans_in_bed)\n    }\n    # Check if all time series have the same length\n    assertSetEqual(length(unique(lengths(activity_patterns))), 1)\n\n    return(activity_patterns)\n}\n\n#########build_model_obj######\n#' @title incorporate vector, host and activity parameters in the entomological\n#' model, initialize and build a model object\n#'\n#' @description \\code{build_model_obj} This function incorporates defined\n#' vector, host and activity parameters in the entomological model of mosquito\n#' oviposition cycle and builds a comprehensive object containing all model\n#' parameters. Additional parameters are calculated and included in the object.\n#' These include mosquito death and availability rate for three different types\n#' of hosts: humans protected by intervention, unprotected humans and animals).\n#' The function should be applied only on list objects created by the\n#' package functions \\code{def_vector_params} and \\code{def_host_params}.\n#' Functionality using other customized objects is not guaranteed.\n#' @param vec_p object containing vector-specific entomological parameteres\n#' created with the function \\code{def_vector_params}\n#' @param hosts_p object containing host-specific entomological parameters\n#' created with the function \\code{def_host_params}\n#' @param total_pop total population of humans and animals\n#'\n#' @return list object containing the following component:\n#' \\itemize{\n#' \\item \\code{vec_params}: object with mosquito-specific entomological\n#' parameters (use function \\code{def_vector_params} to generate object)\n#' \\item \\code{host_params}: object with host-specific entomological parameters\n#' (use function \\code{def_hosts_params} to generate object).\n#' In addition to previously-defined parameters, it contains:\n#' \\itemize{\n#' \\item \\code{muvA}: mosquito death rate\n#' \\item \\code{alphai}: availability to mosquitoes for each host type\n#' }\n#' \\item \\code{activity}: activity patterns for mosquitoes and humans\n#' (see function \\code{def_activity_patterns} for object details)\n#' \\item \\code{total_pop}: total population of humans and animals\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#' @import checkmate\n#'\n#' @examples\n#' # Retrieve the species-specific entomological parameters for An. gambiae\n#' gambiae_vec_p = def_vector_params(\"Anopheles gambiae\")\n#' # Retrieve the host-specific entomological parameters for An. gambiae\n#' gambiae_hosts_p = def_host_params(\"Anopheles gambiae\")\n#' # Retrieve default activity patterns for humans and mosquitoes\n#' default_rhythms = def_activity_patterns(\"default_Anopheles_gambiae\")\n#' # Build model object for a population of 2000 hosts\n#' model_p = build_model_obj(gambiae_vec_p, gambiae_hosts_p,\n#' default_rhythms, 2000)\n#' print(model_p)\n#' @export\n#'\nbuild_model_obj = function(vec_p, hosts_p, activity, total_pop) {\n    # Calculate the mosquito death rate for biting each host type and the host\n    # availability rate\n    assertNumeric(total_pop, lower = 1)\n    hosts_p = calc_hosts_ent_params(vec_p, hosts_p, total_pop)\n    return(model_param = list(vec_params = vec_p, host_params = hosts_p,\n                              activity = activity, total_pop = total_pop))\n}\n\n#########def_interventions_effects#####\n#' @title define the effects of interventions\n#'\n#' @description This function defines the survival and\n#' effects of interventions on the transition probabilities between the\n#' consecutive stages of the mosquito oviposition cycle. These values are given\n#' for a set of interpolation points which are\n#' uniformly distributed across the duration of the intervention. To\n#' define the effects, this function either uses the\n#' intervention models which are available in the AnophelesModel database,\n#' or directly receives the vectors with the intervention effects\n#' for interventions which are not present in the database. In the latter case,\n#' it is assumed that the provided intervention effects values are\n#' adjusted according to the mosquito bionomics,\n#' activity patterns of mosquitoes and humans, as well as\n#' human exposure to mosquitoes.\n#'\n#' @param intervention_list list of intervention objects,\n#' where each object is itself a list with the following attributes:\n#' \\itemize{\n#' \\item \\code{id:} string with the intervention ID; for intervention IDs\n#' available in the package, check \\code{list_available_interventions()}\n#' \\item \\code{description:} short string with the description of\n#' the intervention; can be used to differentiate between\n#' interventions which have the same ID\n#' \\item \\code{parameterisation:} string corresponding to the name of the\n#' intervention parameterisation to be used to calculate the transition\n#' probabilities. To use a parameterisation available in the\n#' package database, this attribute needs to match one of the parameterisations\n#' (column \"Parameterisation\") retrieved with \\code{list_intervention_models()}.\n#' To use a new parameterisation which is\n#' not present in the package database, this\n#' argument can contain any name chosen by the user and the attribute\n#' \\code{effects} needs to be provided as well (see description below).\n#' \\item \\code{LLIN_type:} a string containing the LLIN type,\n#' only needed to be specified for LLINs interventions intending to use\n#' the LLINs models parameters provided with the package\n#' \\item \\code{LLIN_insecticide:} a string containing the LLIN insecticide type,\n#' only needed for LLINs interventions intending to\n#' use the LLIN models parameters provided with the package,\n#' \\item \\code{LLIN_country:} a string containing the country where the LLIN\n#' characteristics were measured, only provided for LLINs interventions\n#' intending to use the LLIN models parameters provided with the package\n#' \\item \\code{effects:} list of intervention survival and effects on the\n#' mosquito oviposition cycle. This attribute allows defining intervention\n#' effects which are not in the package database and is \\strong{optional}\n#' if \\code{parameterisation} matches one of the intervention parameterisations\n#' available in the package database. These effects include, in addition to the\n#' availability to mosquitoes and the proportion of infected mosquitoes, the\n#' transition probabilities between the consecutive stages of the\n#' oviposition cycle. The decay of the effects can also be specified if\n#' generation of a <GVI> xml snippet for OpenMalaria simulations is envisaged.\n#' The effects are defined through the following list attributes:\n#' \\itemize{\n#' \\item \\code{host_types:} for reference only, vector of strings coding the\n#' different types of hosts, must be equal to\n#' \\{\"protected humans\", \"unprotected humans\", \"animals\"\\}. All the remaining\n#' attributes of the \\code{effects} object, except for \\code{survival}\n#' are represented by 3-column matrices, where each column,\n#' \\code{j=\\{1, 2, 3\\}}, corresponds to values for the three types of hosts\n#' defined in the same order as for \\code{host_types}\n#' \\item \\code{Kvi}: proportion of susceptible mosquitoes that become\n#' infected after biting a host of type j, contains one row and 3 columns\n#' \\item \\code{alphai}: availability of a host of type j to mosquitoes, contains\n#' \\code{num_ip_points} rows and 3 columns\n#' \\item \\code{PBi}: probability that a mosquito bites a host of type j,\n#' contains \\code{num_ip_points} rows and 3 columns\n#' \\item \\code{PCi}: probability that a mosquito finds a resting place after\n#' biting a host of type j, contains \\code{num_ip_points} rows and 3 columns\n#' \\item \\code{PDi}: probability that a mosquito survives the resting phase\n#' after biting a host of type j, contains \\code{num_ip_points}\n#' rows and 3 columns\n#' \\item \\code{PEi}: probability that a mosquito lays eggs and\n#' returns to host-seeking after biting a host of type j,\n#' contains \\code{num_ip_points} rows and 3 columns\n#'  \\item \\code{survival}: survival of the intervention,\n#'  vector of length \\code{num_ip_points}\n#'  \\item \\code{alphai_decay}: decay of intervention effect on host availability\n#'  to mosquitoes, contains \\code{num_ip_points} rows and 3 columns\n#' \\item \\code{PBi_decay}: decay of intervention effect on\n#' the probability that a mosquito bites a\n#' host of type j, contains \\code{num_ip_points} rows and 3 columns\n#' \\item \\code{PCi_decay}: decay of intervention effect on\n#' the probability that a mosquito finds a\n#' resting place after biting a host of type j,\n#' contains \\code{num_ip_points} rows and 3 columns\n#' }\n#' For the above attributes with \\code{num_ip_points} rows, the values are\n#' provided for\n#' consecutive time points equally distributed throughout the duration of the\n#' intervention. The number of time points needs to match the provided argument\n#' \\code{n_time_points}.\n#' }\n#' @param model_p model object\n#' (generated with function \\code{build_model_obj()})\n#' @param num_ip_points number of interpolation points, default is 100. If\n#' custom intervention effects are specified, the relevant effect attributes\n#' need to have a number of rows equal to \\code{num_ip_points} (see above)\n#' @param verbose boolean specifying whether any messages should be displayed\n#' during the execution of the function. Default value is TRUE.\n#'\n#' @return list object with the following attributes:\n#' \\itemize{\n#' \\item \\code{id:} string with the intervention ID\n#' \\item \\code{description:} short string with the description of\n#' the intervention\n#' \\item \\code{parameterisation:} string corresponding to the name of the\n#' intervention parameterisation\n#' \\item \\code{LLIN_type:} only for LLINs, a string containing the LLIN type\n#' \\item \\code{LLIN_insecticide:} only for LLINs, a string containing the\n#' LLIN insecticide type\n#' \\item \\code{LLIN_country:} only for LLINs, a string containing the country\n#' where the LLIN characteristics were measured\n#' \\item \\code{effects:} List of intervention survival and effects on the\n#' mosquito oviposition cycle (same format as defined above for the input\n#' attributes)\n#' }\n#'\n#' @author Monica Golumbeanu, \\email{monica.golumbeanu@swisstph.ch}\n#'\n#' @importFrom reshape melt\n#' @import checkmate\n#' @importFrom dplyr \"between\"\n#'\n#' @examples\n#'\n#' @export\n#'\ndef_interventions_effects = function(intervention_list,\n                                        model_p, num_ip_points = 100,\n                                        verbose = TRUE) {\n    # Check if inputs were provided\n    assertList(intervention_list, min.len = 1)\n    assertList(model_p, len = 4)\n    assertNumeric(num_ip_points, lower = 3, upper = 10000)\n\n    for (i in 1:length(intervention_list)) {\n        int_obj = intervention_list[[i]]\n\n        # Further checks of the intervention object\n        assertList(int_obj, min.len = 1)\n        assertSubset(c(\"id\", \"description\", \"parameterisation\"), names(int_obj))\n        if (int_obj$id == \"LLINs\") {\n            assertSubset(c(\"id\", \"description\", \"parameterisation\", \"LLIN_type\",\n                            \"LLIN_insecticide\", \"LLIN_country\"), names(int_obj))\n        }\n\n        # Definition of intervention effects\n        if(verbose) {\n            print(paste(\"Defining intervention effects for\", int_obj$id))\n        }\n        if (!is.null(int_obj$effects)) {\n            # Using custom intervention effects outside the package database\n            if (!check_custom_interv_effects(int_obj, num_ip_points)) {\n                err_msg = paste(\"Error defining intervention effects.\",\n                                \"Check the package documentation on how to\",\n                                \"specify custom intervention effects.\")\n                stop(err_msg)\n            } else {\n                if (verbose) {\n                    print(\"Using the provided, custom intervention effects.\")\n                }\n            }\n        } else if (!is.null(int_obj$parameterisation)){\n            # Update intervention-specific parameters\n            if (verbose) {\n                print(paste0(\"Using intervention effects available for model \",\n                             int_obj$parameterisation))\n            }\n            int_obj = calc_interv_effects_db(interv_obj = int_obj,\n                                             model_p = model_p,\n                                             ip = num_ip_points)\n            intervention_list[[i]] = int_obj\n        } else {\n            err_msg = paste(\"Error defining intervention effects\",\n                            \"for the specified parameterisation.\",\n                            \"Check that the parameterisation exists and the\",\n                            \"intervention object is defined accordingly.\")\n            stop(err_msg)\n        }\n    }\n    return(intervention_list)\n}\n",
    "created" : 1634628705823.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4220189097",
    "id" : "C4982BA3",
    "lastKnownWriteTime" : 1634590336,
    "last_content_update" : 1634590336,
    "path" : "~/Documents/GitRepos/anophelesmodel2/dev_AnophelesModel/AnophelesModel/R/AnophelesModel_init.R",
    "project_path" : "R/AnophelesModel_init.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}